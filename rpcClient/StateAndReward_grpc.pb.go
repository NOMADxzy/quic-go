// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: StateAndReward.proto

package rpcClient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AcerServiceClient is the client API for AcerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcerServiceClient interface {
	GetExplorationAction(ctx context.Context, in *StateReward, opts ...grpc.CallOption) (*Action, error)
	UpdateMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Res, error)
}

type acerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcerServiceClient(cc grpc.ClientConnInterface) AcerServiceClient {
	return &acerServiceClient{cc}
}

func (c *acerServiceClient) GetExplorationAction(ctx context.Context, in *StateReward, opts ...grpc.CallOption) (*Action, error) {
	out := new(Action)
	err := c.cc.Invoke(ctx, "/service.acerService/GetExplorationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acerServiceClient) UpdateMetric(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/service.acerService/UpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcerServiceServer is the server API for AcerService service.
// All implementations must embed UnimplementedAcerServiceServer
// for forward compatibility
type AcerServiceServer interface {
	GetExplorationAction(context.Context, *StateReward) (*Action, error)
	UpdateMetric(context.Context, *Metric) (*Res, error)
	mustEmbedUnimplementedAcerServiceServer()
}

// UnimplementedAcerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAcerServiceServer struct {
}

func (UnimplementedAcerServiceServer) GetExplorationAction(context.Context, *StateReward) (*Action, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExplorationAction not implemented")
}
func (UnimplementedAcerServiceServer) UpdateMetric(context.Context, *Metric) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedAcerServiceServer) mustEmbedUnimplementedAcerServiceServer() {}

// UnsafeAcerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcerServiceServer will
// result in compilation errors.
type UnsafeAcerServiceServer interface {
	mustEmbedUnimplementedAcerServiceServer()
}

func RegisterAcerServiceServer(s grpc.ServiceRegistrar, srv AcerServiceServer) {
	s.RegisterService(&AcerService_ServiceDesc, srv)
}

func _AcerService_GetExplorationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcerServiceServer).GetExplorationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.acerService/GetExplorationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcerServiceServer).GetExplorationAction(ctx, req.(*StateReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcerService_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcerServiceServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.acerService/UpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcerServiceServer).UpdateMetric(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

// AcerService_ServiceDesc is the grpc.ServiceDesc for AcerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.acerService",
	HandlerType: (*AcerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExplorationAction",
			Handler:    _AcerService_GetExplorationAction_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _AcerService_UpdateMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "StateAndReward.proto",
}
